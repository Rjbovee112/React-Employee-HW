{"version":3,"sources":["components/Employees.js","pages/Home.js","serviceWorker.js","index.js"],"names":["Employee","employees","this","props","className","map","employee","Fragment","key","id","name","stack","phone","email","React","Component","Home","state","isLoading","filterEmployees","event","filterValue","target","value","setState","allEmployees","filter","sortEmployees","sort","employee1","employee2","employee1LastName","split","employee2LastName","fetch","then","response","json","catch","error","type","onClick","onChange","Employees","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"sOAuCeA,G,6KAjCD,IACEC,EAAcC,KAAKC,MAAnBF,UAGR,OACI,2BAAOG,UAAU,SACb,+BACI,wBAAIA,UAAU,UACV,wBAAIA,UAAU,UAAd,QACA,wBAAIA,UAAU,UAAd,SACA,wBAAIA,UAAU,UAAd,SACA,wBAAIA,UAAU,UAAd,WAGR,+BACKH,EAAUI,KAAI,SAACC,GAAD,OACX,kBAAC,IAAMC,SAAP,CAAgBC,IAAKF,EAASG,IAC1B,wBAAIL,UAAU,SACV,wBAAIA,UAAU,SAASE,EAASI,MAChC,wBAAIN,UAAU,SAASE,EAASK,OAChC,wBAAIP,UAAU,SAASE,EAASM,OAChC,wBAAIR,UAAU,SAASE,EAASO,kB,GAvBzCC,IAAMC,YCgGdC,G,kNA9FXC,MAAQ,CACJC,WAAW,EACXjB,UAAW,I,EAkBfkB,gBAAkB,SAACC,GACf,IAAMC,EAAcD,EAAME,OAAOC,MACb,QAAhBF,EACA,EAAKG,SAAS,CAAEvB,UAAW,EAAKgB,MAAMQ,eAGtC,EAAKD,SAAS,CACVvB,UAAW,EAAKgB,MAAMQ,aAAaC,QAAO,SAAUpB,GAChD,OAAIA,EAASK,QAAUU,Q,EAUvCM,cAAgB,WACZ,EAAKH,SAAS,CACVvB,UAAW,EAAKgB,MAAMhB,UAAU2B,MAAK,SAAUC,EAAWC,GACtD,IAAIC,EAAoBF,EAAUnB,KAAKsB,MAAM,KAAK,GAC9CC,EAAoBH,EAAUpB,KAAKsB,MAAM,KAAK,GAElD,OAAID,EAAoBE,EACb,EAGPA,EAAoBF,GACZ,EAGL,Q,kEA/CE,IAAD,OAEhBG,MAAM,oBACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAClC,GACH,EAAKuB,SAAS,CACVN,WAAW,EACXjB,YAAWwB,aAAcxB,OAG9BqC,OAAM,SAACC,GACN,EAAKf,SAAS,CAAEN,WAAW,EAAOqB,e,+BA0CpC,IAAD,EAC4BrC,KAAKe,MAA9BC,EADH,EACGA,UAAWjB,EADd,EACcA,UAEnB,OAAIiB,EACO,yCAGP,kBAAC,IAAMX,SAAP,KACI,yBAAKH,UAAU,QACX,yBAAKA,UAAU,WACX,uDACA,yBAAKA,UAAU,UAEX,4BAAQA,UAAU,gBAAgBoC,KAAK,SAASC,QAASvC,KAAKyB,eAA9D,sBAEA,4CACA,4BAAQe,SAAUxC,KAAKiB,iBACnB,4BAAQI,MAAM,QACd,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,YAAd,gBAQhB,kBAACoB,EAAD,CAAW1C,UAAWA,S,GAxFnBa,IAAMC,YCQL6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAC,GACLmB,QAAQnB,MAAMA,EAAMoB,a","file":"static/js/main.9f0631fc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Employee.css';\r\n\r\n\r\nclass Employee extends React.Component {\r\n\r\n    render() {\r\n        const { employees } = this.props;\r\n\r\n\r\n        return (\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr className=\"table2\">\r\n                        <th className=\"table1\">Name</th>\r\n                        <th className=\"table1\">Stack</th>\r\n                        <th className=\"table1\">Phone</th>\r\n                        <th className=\"table1\">Email</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {employees.map((employee) => (\r\n                        <React.Fragment key={employee.id}>\r\n                            <tr className=\"table\">\r\n                                <td className=\"table\">{employee.name}</td>\r\n                                <td className=\"table\">{employee.stack}</td>\r\n                                <td className=\"table\">{employee.phone}</td>\r\n                                <td className=\"table\">{employee.email}</td>\r\n                            </tr>\r\n                        </React.Fragment>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Employee;","import React from 'react';\r\nimport Employees from '../components/Employees';\r\nimport '../components/Headerstyle.css';\r\n\r\nclass Home extends React.Component {\r\n\r\n    state = {\r\n        isLoading: true,\r\n        employees: [],\r\n    }\r\n\r\n    componentDidMount() {\r\n        //getting the employee from employees.json and adding it to our state\r\n        fetch('./employees.json')\r\n            .then(response => response.json())\r\n            .then((employees) => {\r\n                this.setState({\r\n                    isLoading: false,\r\n                    employees, allEmployees: employees\r\n                })\r\n\r\n            }).catch((error) => {\r\n                this.setState({ isLoading: false, error });\r\n            })\r\n    }\r\n\r\n    filterEmployees = (event) => {\r\n        const filterValue = event.target.value;\r\n        if (filterValue === 'All') {\r\n            this.setState({ employees: this.state.allEmployees });\r\n        }\r\n        else {\r\n            this.setState({\r\n                employees: this.state.allEmployees.filter(function (employee) {\r\n                    if (employee.stack === filterValue) {\r\n                        return true;\r\n                    }\r\n\r\n                    return false;\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    sortEmployees = () => {\r\n        this.setState({\r\n            employees: this.state.employees.sort(function (employee1, employee2) {\r\n                var employee1LastName = employee1.name.split(' ')[1];\r\n                var employee2LastName = employee2.name.split(' ')[1];\r\n\r\n                if (employee1LastName > employee2LastName) {\r\n                    return 1;\r\n                }\r\n\r\n                if (employee2LastName > employee1LastName) {\r\n                    return -1;\r\n                }\r\n\r\n                return 0;\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const { isLoading, employees } = this.state;\r\n\r\n        if (isLoading) {\r\n            return <p>Loading...</p>;\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"main\">\r\n                    <div className=\"headDiv\">\r\n                        <h1>Current Stack Employees</h1>\r\n                        <div className=\"btnDiv\">\r\n\r\n                            <button className=\"sort-btn btn \" type=\"submit\" onClick={this.sortEmployees}> Sort by Last Name</button>\r\n\r\n                            <label>FILTER BY</label>\r\n                            <select onChange={this.filterEmployees}>\r\n                                <option value=\"All\" />\r\n                                <option value=\"Full-Stack\">Full-Stack</option>\r\n                                <option value=\"Front-End\">Front-End</option>\r\n                                <option value=\"Back-End\">Back-End</option>\r\n                            </select>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <Employees employees={employees} />\r\n            </React.Fragment >\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Home;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Home from './pages/Home.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Home />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}